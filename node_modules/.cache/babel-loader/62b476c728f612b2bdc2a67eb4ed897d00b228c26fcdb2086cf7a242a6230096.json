{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  state: {\n    messages: [],\n    message_icon_list: {\n      1: 'pi pi-times-circle',\n      2: 'pi pi-info-circle',\n      3: 'pi pi-exclamation-triangle',\n      4: 'pi pi-check'\n    }\n  },\n  actions: {\n    async add_error_message(context, message) {\n      context.commit('append_message', {\n        severity: 'error',\n        closable: true,\n        icon: context.state.message_icon_list[1],\n        content: message\n      });\n    },\n    async _add_message(context, message) {\n      const type_list = {\n        1: 'error',\n        2: 'info',\n        3: 'warn',\n        4: 'success'\n      };\n      context.commit('append_message', {\n        severity: type_list[message.type],\n        closable: true,\n        icon: context.state.message_icon_list[message.type],\n        content: message.message\n      });\n    },\n    async add_message(context, messages) {\n      if (Array.isArray(messages)) {\n        for (let message of messages) {\n          await context.dispatch('_add_message', message);\n        }\n      } else if (typeof messages === 'object') {\n        await context.dispatch('_add_message', messages);\n      } else {\n        await context.dispatch('_add_message', {\n          name: messages,\n          desc: messages,\n          type: 1\n        });\n      }\n    }\n  },\n  mutations: {\n    append_message(state, message) {\n      state.messages.push(message);\n    }\n  },\n  getters: {\n    get_messages: state => state.messages\n  }\n};","map":{"version":3,"names":["state","messages","message_icon_list","actions","add_error_message","context","message","commit","severity","closable","icon","content","_add_message","type_list","type","add_message","Array","isArray","dispatch","name","desc","mutations","append_message","push","getters","get_messages"],"sources":["/app/src/store/message.js"],"sourcesContent":["export default {\r\n    state: {\r\n        messages: [],\r\n        message_icon_list: {\r\n            1: 'pi pi-times-circle',\r\n            2: 'pi pi-info-circle',\r\n            3: 'pi pi-exclamation-triangle',\r\n            4: 'pi pi-check'\r\n        }\r\n    },\r\n    actions: {\r\n        async add_error_message(context, message) {\r\n            context.commit('append_message', {\r\n                severity: 'error',\r\n                closable: true,\r\n                icon: context.state.message_icon_list[1],\r\n                content: message\r\n            })\r\n        },\r\n        async _add_message(context, message) {\r\n            const type_list = {\r\n                1: 'error', 2: 'info', 3: 'warn', 4: 'success'\r\n            }\r\n            context.commit('append_message', {\r\n                severity: type_list[message.type],\r\n                closable: true,\r\n                icon: context.state.message_icon_list[message.type],\r\n                content: message.message\r\n            })\r\n        },\r\n        async add_message(context, messages) {\r\n            if (Array.isArray(messages)) {\r\n                for (let message of messages) {\r\n                    await context.dispatch('_add_message', message)\r\n                }\r\n            } else if (typeof messages === 'object') {\r\n                await context.dispatch('_add_message', messages)\r\n            } else {\r\n                await context.dispatch('_add_message', {\r\n                    name: messages,\r\n                    desc: messages,\r\n                    type: 1\r\n                })\r\n            }\r\n\r\n        }\r\n    },\r\n    mutations: {\r\n        append_message(state, message) {\r\n            state.messages.push(message)\r\n        }\r\n    },\r\n    getters: {\r\n        get_messages: (state) => state.messages\r\n    }\r\n}"],"mappings":";AAAA,eAAe;EACXA,KAAK,EAAE;IACHC,QAAQ,EAAE,EAAE;IACZC,iBAAiB,EAAE;MACf,CAAC,EAAE,oBAAoB;MACvB,CAAC,EAAE,mBAAmB;MACtB,CAAC,EAAE,4BAA4B;MAC/B,CAAC,EAAE;IACP;EACJ,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,iBAAiB,CAACC,OAAO,EAAEC,OAAO,EAAE;MACtCD,OAAO,CAACE,MAAM,CAAC,gBAAgB,EAAE;QAC7BC,QAAQ,EAAE,OAAO;QACjBC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAEL,OAAO,CAACL,KAAK,CAACE,iBAAiB,CAAC,CAAC,CAAC;QACxCS,OAAO,EAAEL;MACb,CAAC,CAAC;IACN,CAAC;IACD,MAAMM,YAAY,CAACP,OAAO,EAAEC,OAAO,EAAE;MACjC,MAAMO,SAAS,GAAG;QACd,CAAC,EAAE,OAAO;QAAE,CAAC,EAAE,MAAM;QAAE,CAAC,EAAE,MAAM;QAAE,CAAC,EAAE;MACzC,CAAC;MACDR,OAAO,CAACE,MAAM,CAAC,gBAAgB,EAAE;QAC7BC,QAAQ,EAAEK,SAAS,CAACP,OAAO,CAACQ,IAAI,CAAC;QACjCL,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAEL,OAAO,CAACL,KAAK,CAACE,iBAAiB,CAACI,OAAO,CAACQ,IAAI,CAAC;QACnDH,OAAO,EAAEL,OAAO,CAACA;MACrB,CAAC,CAAC;IACN,CAAC;IACD,MAAMS,WAAW,CAACV,OAAO,EAAEJ,QAAQ,EAAE;MACjC,IAAIe,KAAK,CAACC,OAAO,CAAChB,QAAQ,CAAC,EAAE;QACzB,KAAK,IAAIK,OAAO,IAAIL,QAAQ,EAAE;UAC1B,MAAMI,OAAO,CAACa,QAAQ,CAAC,cAAc,EAAEZ,OAAO,CAAC;QACnD;MACJ,CAAC,MAAM,IAAI,OAAOL,QAAQ,KAAK,QAAQ,EAAE;QACrC,MAAMI,OAAO,CAACa,QAAQ,CAAC,cAAc,EAAEjB,QAAQ,CAAC;MACpD,CAAC,MAAM;QACH,MAAMI,OAAO,CAACa,QAAQ,CAAC,cAAc,EAAE;UACnCC,IAAI,EAAElB,QAAQ;UACdmB,IAAI,EAAEnB,QAAQ;UACda,IAAI,EAAE;QACV,CAAC,CAAC;MACN;IAEJ;EACJ,CAAC;EACDO,SAAS,EAAE;IACPC,cAAc,CAACtB,KAAK,EAAEM,OAAO,EAAE;MAC3BN,KAAK,CAACC,QAAQ,CAACsB,IAAI,CAACjB,OAAO,CAAC;IAChC;EACJ,CAAC;EACDkB,OAAO,EAAE;IACLC,YAAY,EAAGzB,KAAK,IAAKA,KAAK,CAACC;EACnC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport router from \"@/router\";\nimport { useLayout } from '@/layout/composables/layout';\nimport store from \"@/store\";\nconst {\n  changeThemeSettings,\n  onMenuToggle,\n  layoutConfig\n} = useLayout();\nexport default {\n  props: ['lang'],\n  data() {\n    this.$i18n.locale = this.lang;\n    return {\n      outsideClickListener: null,\n      topbarMenuActive: false,\n      mode_chack: false\n    };\n  },\n  async mounted() {\n    this.mode_chack = window.matchMedia(\"(prefers-color-scheme:dark)\").matches;\n    this.bindOutsideClickListener();\n    this.darkMode = false;\n  },\n  beforeUnmount() {\n    this.unbindOutsideClickListener();\n  },\n  methods: {\n    onMenuToggle,\n    onTopBarMenuButton() {\n      this.topbarMenuActive = !this.topbarMenuActive;\n    },\n    onSettingsClick() {\n      this.topbarMenuActive = false;\n      router.push({\n        'name': 'settings'\n      });\n    },\n    bindOutsideClickListener() {\n      if (!this.outsideClickListener) {\n        this.outsideClickListener = event => {\n          if (this.isOutsideClicked(event)) {\n            this.topbarMenuActive = false;\n          }\n        };\n        document.addEventListener('click', this.outsideClickListener);\n      }\n    },\n    unbindOutsideClickListener() {\n      if (this.outsideClickListener) {\n        document.removeEventListener('click', this.outsideClickListener);\n        this.outsideClickListener = null;\n      }\n    },\n    isOutsideClicked(event) {\n      if (!this.topbarMenuActive) return;\n      const sidebarEl = document.querySelector('.layout-topbar-menu');\n      const topbarEl = document.querySelector('.layout-topbar-menu-button');\n      return !(sidebarEl.isSameNode(event.target) || sidebarEl.contains(event.target) || topbarEl.isSameNode(event.target) || topbarEl.contains(event.target));\n    },\n    language_change(e) {\n      const params = {\n        ...this.$route.params\n      };\n      params.lang = e.value;\n      this.$router.push({\n        'name': this.$route.name,\n        params,\n        query: this.$route.query\n      });\n      this.$i18n.locale = e.value;\n      this.$i18n.fallbackLocale = e.value;\n    },\n    onChangeTheme() {\n      const mode = this.darkMode;\n      // store.commit('basic', {key: 'darkMode', value: !mode})\n      const theme = mode ? 'lara-light-indigo' : 'lara-dark-indigo';\n      const elementId = 'theme-css';\n      const linkElement = document.getElementById(elementId);\n      const cloneLinkElement = linkElement.cloneNode(true);\n      const newThemeUrl = linkElement.getAttribute('href').replace(layoutConfig.theme.value, theme);\n      cloneLinkElement.setAttribute('id', elementId + '-clone');\n      cloneLinkElement.setAttribute('href', newThemeUrl);\n      cloneLinkElement.addEventListener('load', () => {\n        linkElement.remove();\n        cloneLinkElement.setAttribute('id', elementId);\n        changeThemeSettings(theme, mode);\n      });\n      linkElement.parentNode.insertBefore(cloneLinkElement, linkElement.nextSibling);\n    },\n    async onNavbarLogoutButton() {\n      store.commit('basic', {\n        key: 'token',\n        value: ''\n      });\n      localStorage.removeItem('access');\n      localStorage.removeItem('refresh');\n      await this.$router.push({\n        name: 'login'\n      });\n    },\n    async onNavbarLoginButton() {\n      await this.$router.push({\n        name: 'login'\n      });\n    }\n  },\n  computed: {\n    topbarMenuClasses() {\n      return {\n        'layout-topbar-menu-mobile-active': this.topbarMenuActive\n      };\n    },\n    language_menu_items: () => store.getters.get_languages,\n    selected_lang: () => store.getters.get_selected_lang,\n    logo_panel() {\n      return true ? this.navbar_icon_1 : this.navbar_icon_1_dark;\n    },\n    logo_city() {\n      return true ? this.navbar_icon_2 : this.navbar_icon_2_dark;\n    },\n    darkMode: () => store.state.darkMode,\n    is_auth: () => store.state.token,\n    navbar_items() {\n      return [];\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["router","useLayout","store","changeThemeSettings","onMenuToggle","layoutConfig","props","data","$i18n","locale","lang","outsideClickListener","topbarMenuActive","mode_chack","mounted","window","matchMedia","matches","bindOutsideClickListener","darkMode","beforeUnmount","unbindOutsideClickListener","methods","onTopBarMenuButton","onSettingsClick","push","event","isOutsideClicked","document","addEventListener","removeEventListener","sidebarEl","querySelector","topbarEl","isSameNode","target","contains","language_change","e","params","$route","value","$router","name","query","fallbackLocale","onChangeTheme","mode","theme","elementId","linkElement","getElementById","cloneLinkElement","cloneNode","newThemeUrl","getAttribute","replace","setAttribute","remove","parentNode","insertBefore","nextSibling","onNavbarLogoutButton","commit","key","localStorage","removeItem","onNavbarLoginButton","computed","topbarMenuClasses","language_menu_items","getters","get_languages","selected_lang","get_selected_lang","logo_panel","navbar_icon_1","navbar_icon_1_dark","logo_city","navbar_icon_2","navbar_icon_2_dark","state","is_auth","token","navbar_items"],"sourceRoot":"","sources":["/app/src/layout/AppTopbar.vue"],"sourcesContent":["<script>\r\nimport router from \"@/router\";\r\nimport {useLayout} from '@/layout/composables/layout';\r\nimport store from \"@/store\";\r\nconst {changeThemeSettings ,onMenuToggle, layoutConfig} = useLayout();\r\n\r\nexport default {\r\n  props: ['lang'],\r\n  data() {\r\n    this.$i18n.locale = this.lang\r\n    return {\r\n      outsideClickListener: null,\r\n      topbarMenuActive: false,\r\n      mode_chack: false,\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.mode_chack = window.matchMedia(\"(prefers-color-scheme:dark)\").matches\r\n    this.bindOutsideClickListener();\r\n    this.darkMode = false\r\n  },\r\n  beforeUnmount() {\r\n    this.unbindOutsideClickListener();\r\n  },\r\n  methods: {\r\n    onMenuToggle,\r\n    onTopBarMenuButton() {\r\n      this.topbarMenuActive = !this.topbarMenuActive;\r\n    },\r\n    onSettingsClick() {\r\n      this.topbarMenuActive = false;\r\n      router.push({'name': 'settings'});\r\n    },\r\n    bindOutsideClickListener() {\r\n      if (!this.outsideClickListener) {\r\n        this.outsideClickListener = (event) => {\r\n          if (this.isOutsideClicked(event)) {\r\n            this.topbarMenuActive = false;\r\n          }\r\n        };\r\n        document.addEventListener('click', this.outsideClickListener);\r\n      }\r\n    },\r\n    unbindOutsideClickListener() {\r\n      if (this.outsideClickListener) {\r\n        document.removeEventListener('click', this.outsideClickListener);\r\n        this.outsideClickListener = null;\r\n      }\r\n    },\r\n    isOutsideClicked(event) {\r\n      if (!this.topbarMenuActive) return;\r\n\r\n      const sidebarEl = document.querySelector('.layout-topbar-menu');\r\n      const topbarEl = document.querySelector('.layout-topbar-menu-button');\r\n\r\n      return !(sidebarEl.isSameNode(event.target) || sidebarEl.contains(event.target) || topbarEl.isSameNode(event.target) || topbarEl.contains(event.target));\r\n    },\r\n    language_change(e) {\r\n      const params = {...this.$route.params}\r\n      params.lang = e.value\r\n      this.$router.push({'name': this.$route.name, params, query: this.$route.query})\r\n      this.$i18n.locale = e.value\r\n      this.$i18n.fallbackLocale = e.value\r\n    },\r\n\r\n    onChangeTheme () {\r\n    const mode = this.darkMode\r\n    // store.commit('basic', {key: 'darkMode', value: !mode})\r\n    const theme = mode ? 'lara-light-indigo' : 'lara-dark-indigo'\r\n    const elementId = 'theme-css';\r\n    const linkElement = document.getElementById(elementId);\r\n    const cloneLinkElement = linkElement.cloneNode(true);\r\n    const newThemeUrl = linkElement.getAttribute('href').replace(layoutConfig.theme.value, theme);\r\n    cloneLinkElement.setAttribute('id', elementId + '-clone');\r\n    cloneLinkElement.setAttribute('href', newThemeUrl);\r\n    cloneLinkElement.addEventListener('load', () => {\r\n        linkElement.remove();\r\n        cloneLinkElement.setAttribute('id', elementId);\r\n        changeThemeSettings(theme, mode);\r\n    });\r\n    linkElement.parentNode.insertBefore(cloneLinkElement, linkElement.nextSibling);\r\n  },\r\n  async onNavbarLogoutButton() {\r\n      store.commit('basic', {key: 'token', value: ''})\r\n      localStorage.removeItem('access')\r\n      localStorage.removeItem('refresh')\r\n      await this.$router.push({name: 'login'})\r\n    },\r\n    async onNavbarLoginButton() {\r\n      await this.$router.push({name: 'login'})\r\n    }\r\n  },\r\n  computed: {\r\n    topbarMenuClasses() {\r\n      return {\r\n        'layout-topbar-menu-mobile-active': this.topbarMenuActive\r\n      };\r\n    },\r\n    language_menu_items: () => store.getters.get_languages,\r\n    selected_lang: () => store.getters.get_selected_lang,\r\n    logo_panel() {\r\n        return true ? this.navbar_icon_1 : this.navbar_icon_1_dark\r\n    },\r\n    logo_city() {\r\n      return true ? this.navbar_icon_2 : this.navbar_icon_2_dark\r\n    },  \r\n    darkMode: () => store.state.darkMode,\r\n    is_auth: () => store.state.token,\r\n    navbar_items() {return []\r\n  }}\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"layout-topbar d-flex justify-content-between\">\r\n\r\n    <div to=\"/\" class=\"layout-topbar-logo\">\r\n      <a href=\"/\">\r\n        <img src=\"/img/icons/favicon.png\" alt=\"logo\" />\r\n        <span>Onson Mail</span>\r\n      </a>\r\n      <button class=\"p-link layout-menu-button layout-topbar-button\" @click=\"onMenuToggle()\">\r\n        <i class=\"pi pi-bars\"></i>\r\n    </button>\r\n    </div>\r\n    <button class=\"p-link layout-topbar-menu-button layout-topbar-button ml-2\" @click=\"onTopBarMenuButton()\">\r\n      <i class=\"pi pi-ellipsis-v\"></i>\r\n    </button>\r\n\r\n    <div class=\"layout-topbar-menu m-0\" :class=\"topbarMenuClasses\">\r\n      <Dropdown class=\"ml-3\" :options=\"language_menu_items\" optionLabel=\"lang\"\r\n                optionValue=\"code\" :model-value=\"lang\"\r\n                @change=\"language_change\" inputStyle=\"padding: 1rem\"\r\n      />\r\n      <button v-if=\"!is_auth\" @click=\"onNavbarLoginButton()\" class=\"p-link layout-topbar-button m-auto\">\r\n        <i class=\"pi pi-sign-in\"></i>\r\n        <span>{{ $t(\"Войти\") }}</span>\r\n      </button>\r\n      <button v-if=\"is_auth\" @click=\"onNavbarLogoutButton()\" class=\"p-link layout-topbar-button m-auto\">\r\n        <i class=\"pi pi-sign-out\"></i>\r\n        <span>{{ $t(\"Выйти\") }}</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.navbar-logo-text {\r\n  font-size: 0.7rem;\r\n  margin: 0 !important;\r\n  max-width: 70px;\r\n  color: var(--surface-900);\r\n}\r\n\r\n.navbar-logo {\r\n  height: 9rem;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}